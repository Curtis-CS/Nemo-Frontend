{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      run_status: false,\n      isDragging: false,\n      files: [],\n      files2: {},\n      icons: {\n        gif: '/gif-icon.png',\n        jpg: '/jpeg-icon.png',\n        jpeg: '/jpeg-icon.png',\n        mkv: '/mkv-icon.png',\n        mov: '/mov-icon.png',\n        mp4: '/mp4-icon.png',\n        mpeg: '/mpeg-icon.png',\n        png: '/png-icon.png'\n      }\n    };\n  },\n  methods: {\n    addFile(file) {\n      /**\n       * Function to add a file to the files list.\n       * Ensures duplicate files don't exist.\n       * Assigns valid or invalid file size to file.\n       * Assigns valid or invalid file type to file.\n       * @author: Michael Moosmuller\n       * @param file The file information and data.\n       */\n      if (!this.fileExists(file[\"name\"])) {\n        if (this.getFileSizeStatus(file) && this.getFileExtension(file.name) in this.icons) {\n          file[\"valid_size\"] = true;\n          file[\"valid_file\"] = true;\n          this.files.push(file);\n        } else {\n          file[\"valid_size\"] = false;\n          file[\"valid_file\"] = false;\n          this.run_status = true;\n          this.files.push(file);\n        }\n      }\n    },\n    getFileSizeStatus(file) {\n      /**\n       * Function to check the size of a file.\n       * 1MB = 1048576 B's, 1GB = 1048576000 MB's\n       * @author: Michael Moosmuller\n       * @param file File being checked.\n       * @returns {boolean} File size is valid or not.\n       */\n      console.log(file.size <= 1048576000);\n      return file.size <= 1048576000;\n    },\n    clearFiles() {\n      /**\n       * Function to delete the current files when the \"Clear\" button is pressed.\n       * @author: Michael Moosmuller\n       */\n      this.files = [];\n      this.run_status = false;\n    },\n    dragover(e) {\n      /**\n       * Function to handle dragging files over the drop box area.\n       * @author: Michael Moosmuller\n       * @param e Event from user.\n       */\n      e.preventDefault();\n      this.isDragging = true;\n    },\n    dragleave() {\n      /**\n       * Function to set isDragging property when files stop moving over drop box area.\n       * @author: Michael Moosmuller\n       */\n      this.isDragging = false;\n    },\n    drop(e) {\n      /**\n       * Function to handle files being dropped into the drop box area.\n       * @author: Michael Moosmuller\n       * @param e Event of dropping files.\n       */\n      e.preventDefault();\n      if (e.dataTransfer.files) {\n        [...e.dataTransfer.files].forEach(file => {\n          this.addFile(file);\n        });\n      }\n      this.isDragging = false;\n    },\n    fileExists(name) {\n      /**\n       * Function to verify if a file exists within the file list.\n       * @author: Michael Moosmuller\n       * @param name Name of the file.\n       * @returns {boolean} File exists or not.\n       */\n      for (let i = 0; i < this.files.length; i++) {\n        if (this.files[i][\"name\"] === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n    getFileExtension(filename) {\n      /**\n       * Function to get file extension type.\n       * @author: Michael Moosmuller\n       * @param filename Name of the file.\n       * @returns {*} File extension type.\n       */\n      return filename.split('.').pop().toLowerCase();\n    },\n    handleFileUpload() {\n      /**\n       * Function to handle file upload from selected files.\n       * @author: Michael Moosmuller\n       */\n      let files = [...this.$refs.file.files];\n      for (let i = 0; i < files.length; i++) {\n        this.addFile(files[i]);\n      }\n    },\n    removeFile(i) {\n      /**\n       * Function to remove a file from the list.\n       * @author: Michael Moosmuller\n       * @param i Index of the file in the list.\n       */\n      this.files.splice(i, 1);\n      this.verifyFiles();\n    },\n    submitFiles() {\n      let formData = new FormData();\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i];\n        formData.append(this.name, file);\n      }\n      // Axios Request to Back-End Server\n      axios({\n        method: \"POST\",\n        url: 'http://127.0.0.1:5000',\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(function () {\n        console.log(\"SUCCESS!!\");\n      }).catch(function () {\n        console.log(\"FAILURE!!\");\n      });\n    },\n    verifyFiles() {\n      /**\n       * Function to verify if the list of files are all valid file types before submission.\n       * @author: Michael Moosmuller\n       */\n      for (let i = 0; i < this.files.length; i++) {\n        if (!this.files[i][\"valid_file\"] && !this.files[i][\"valid_size\"]) {\n          this.run_status = true;\n          break;\n        } else {\n          this.run_status = false;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","data","run_status","isDragging","files","files2","icons","gif","jpg","jpeg","mkv","mov","mp4","mpeg","png","methods","addFile","file","fileExists","getFileSizeStatus","getFileExtension","name","push","console","log","size","clearFiles","dragover","e","preventDefault","dragleave","drop","dataTransfer","forEach","i","length","filename","split","pop","toLowerCase","handleFileUpload","$refs","removeFile","splice","verifyFiles","submitFiles","formData","FormData","append","method","url","headers","then","catch"],"sourceRoot":"","sources":["/home/student/Desktop/Nemo/Heroku/NemoFrontendGit/Nemo-Frontend/src/components/UploadFiles.vue"],"sourcesContent":["<template>\n  <div class=\"card mt-5 min-card-width\" style=\"width: auto\">\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">Upload Files</h5>\n      <div class=\"dropzone-container\" @dragleave=\"dragleave\" @dragover=\"dragover\" @drop=\"drop\">\n        <input\n            id=\"fileInput\"\n            ref=\"file\"\n            accept=\".gif, .jpeg, .jpg, .mkv, .mov, .mp4, .mpeg, .png\"\n            class=\"hidden-input\"\n            multiple\n            name=\"file\"\n            type=\"file\"\n            @change=\"handleFileUpload\"\n        >\n        <div><img alt=\"\" class=upload-icon src=\"/upload-icon.png\"/></div>\n        <label class=\"\" for=\"fileInput\">\n          <span>Drag and Drop or <u class=\"choose-file-button\">choose files</u>.</span>\n        </label>\n      </div>\n      <div v-if=\"files.length\">\n        <div v-for=\"file in files\" :key=\"file.name\">\n          <div class=\"container border-1 shadow-sm mt-3\">\n            <table width=\"100%\">\n              <tr>\n                <td rowspan=\"2\" class=\"column-file-type-icon\" v-if=\"file.valid_file\">\n                  <img alt=\"\" class=\"custom_thumbnail\" v-bind:src=\"icons[file.name.split('.').pop()]\"/>\n                </td>\n                <td rowspan=\"2\" class=\"column-file-type-icon\" v-else>\n                  <img alt=\"\" class=\"custom_thumbnail\" src=\"/invalid-filetype-icon.png\"/>\n                </td>\n                <td>{{ file.name }}&nbsp;</td>\n                <td rowspan=\"2\" class=\"column-file-size\">{{ Math.round(file.size / 1000) + \"Kb\" }}&nbsp;</td>\n                <td rowspan=\"2\" class=\"column-file-type-icon\">\n                  <button class=\"remove-file-button\" type=\"button\" @click=\"removeFile(files.indexOf(file))\">\n                    <img alt=\"\" class=\"custom_thumbnail\" src=\"/red_x.png\"/>&nbsp;\n                  </button>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <div v-if=\"file.valid_file\" class=\"file-upload valid-file-type\">\n                    Valid file.\n                  </div>\n                  <div v-else class=\"file-upload invalid-file-type\">\n                    Invalid file.\n                  </div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n        <div class=\"container bg-light\">\n          <button class=\"base-button clear-button\" type=\"button\" @click=\"clearFiles\">\n            Clear\n          </button>\n          <button :disabled=\"run_status\" class=\"base-button run-button\" type=\"button\" @click=\"submitFiles\">\n            Run\n          </button>\n      </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      run_status: false,\n      isDragging: false,\n      files: [],\n      files2: {},\n      icons: {\n        gif: '/gif-icon.png',\n        jpg: '/jpeg-icon.png',\n        jpeg: '/jpeg-icon.png',\n        mkv: '/mkv-icon.png',\n        mov: '/mov-icon.png',\n        mp4: '/mp4-icon.png',\n        mpeg: '/mpeg-icon.png',\n        png: '/png-icon.png'\n      }\n    }\n  },\n  methods: {\n    addFile(file) {\n    /**\n     * Function to add a file to the files list.\n     * Ensures duplicate files don't exist.\n     * Assigns valid or invalid file size to file.\n     * Assigns valid or invalid file type to file.\n     * @author: Michael Moosmuller\n     * @param file The file information and data.\n     */\n      if (!(this.fileExists(file[\"name\"]))) {\n        if (this.getFileSizeStatus(file) && this.getFileExtension(file.name) in this.icons) {\n          file[\"valid_size\"] = true\n          file[\"valid_file\"] = true\n          this.files.push(file)\n        } else {\n          file[\"valid_size\"] = false\n          file[\"valid_file\"] = false\n          this.run_status = true\n          this.files.push(file)\n        }\n      }\n    },\n    getFileSizeStatus(file) {\n    /**\n     * Function to check the size of a file.\n     * 1MB = 1048576 B's, 1GB = 1048576000 MB's\n     * @author: Michael Moosmuller\n     * @param file File being checked.\n     * @returns {boolean} File size is valid or not.\n     */\n      console.log(file.size <= 1048576000)\n      return file.size <= 1048576000;\n    },\n    clearFiles() {\n    /**\n     * Function to delete the current files when the \"Clear\" button is pressed.\n     * @author: Michael Moosmuller\n     */\n      this.files = []\n      this.run_status = false\n    },\n    dragover(e) {\n    /**\n     * Function to handle dragging files over the drop box area.\n     * @author: Michael Moosmuller\n     * @param e Event from user.\n     */\n      e.preventDefault()\n      this.isDragging = true;\n    },\n    dragleave() {\n    /**\n     * Function to set isDragging property when files stop moving over drop box area.\n     * @author: Michael Moosmuller\n     */\n      this.isDragging = false;\n    },\n    drop(e) {\n    /**\n     * Function to handle files being dropped into the drop box area.\n     * @author: Michael Moosmuller\n     * @param e Event of dropping files.\n     */\n      e.preventDefault()\n      if (e.dataTransfer.files) {\n        [...e.dataTransfer.files].forEach((file) => {\n          this.addFile(file)\n        })\n      }\n      this.isDragging = false\n    },\n    fileExists(name) {\n    /**\n     * Function to verify if a file exists within the file list.\n     * @author: Michael Moosmuller\n     * @param name Name of the file.\n     * @returns {boolean} File exists or not.\n     */\n      for (let i = 0; i < this.files.length; i++) {\n        if (this.files[i][\"name\"] === name) {\n          return true\n        }\n      }\n      return false\n    },\n    getFileExtension(filename) {\n    /**\n     * Function to get file extension type.\n     * @author: Michael Moosmuller\n     * @param filename Name of the file.\n     * @returns {*} File extension type.\n     */\n      return filename.split('.').pop().toLowerCase()\n    },\n    handleFileUpload() {\n    /**\n     * Function to handle file upload from selected files.\n     * @author: Michael Moosmuller\n     */\n      let files = [...this.$refs.file.files]\n      for (let i = 0; i < files.length; i++) {\n        this.addFile(files[i])\n      }\n    },\n    removeFile(i) {\n    /**\n     * Function to remove a file from the list.\n     * @author: Michael Moosmuller\n     * @param i Index of the file in the list.\n     */\n      this.files.splice(i, 1);\n      this.verifyFiles()\n    },\n    submitFiles() {\n      let formData = new FormData()\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i]\n        formData.append(this.name, file)\n      }\n      // Axios Request to Back-End Server\n      axios({\n        method: \"POST\",\n        url: 'http://127.0.0.1:5000',\n        data: formData,\n        headers: {\"Content-Type\": \"multipart/form-data\"}\n      })\n          .then(function () {\n            console.log(\"SUCCESS!!\")\n          })\n          .catch(function () {\n            console.log(\"FAILURE!!\")\n          });\n    },\n    verifyFiles() {\n    /**\n     * Function to verify if the list of files are all valid file types before submission.\n     * @author: Michael Moosmuller\n     */\n      for (let i = 0; i < this.files.length; i++) {\n        if (!(this.files[i][\"valid_file\"]) && !(this.files[i][\"valid_size\"])) {\n          this.run_status = true\n          break\n        }\n        else {\n          this.run_status = false\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n.base-button {\n  color:black;\n  border-radius: 25px;\n  border-style: solid;\n  border-color: #d8d8d8;\n  border-width: thin;\n  margin-top: 2rem;\n  padding-right: 20px;\n  padding-left: 20px;\n}\n\n.choose-file-button {\n  cursor: pointer;\n  font-style: italic;\n  color: #adcdec;\n}\n\n.clear-button {\n  float: left;\n  background-color: #ffffff;\n}\n\n.column-file-size {\n  width: 50px;\n  justify-content: left;\n}\n\n.column-file-type-icon {\n  width: 50px;\n  justify-content: center;\n}\n\n.custom_thumbnail {\n  width: 30px;\n  height: 30px;\n}\n\n.dropzone-container {\n    padding: 1rem;\n    background: #f7fafc;\n    border: 2px dashed #e2e8f0;\n    margin-top: 1rem;\n    text-align: center;\n}\n\n.file-upload {\n    font-style: italic;\n    font-size: 12px;\n}\n\n.hidden-input {\n    opacity: 0;\n    overflow: hidden;\n    position: absolute;\n    width: 1px;\n    height: 1px;\n}\n\n.invalid-file-type {\n  color: red;\n}\n\n.min-card-width {\n  min-width: 15em;\n}\n\n.remove-file-button {\n  border: none;\n  background-color: white;\n}\n\n.run-button {\n  float: right;\n  background-color: #ffffff;\n}\n\n.run-button:disabled {\n  float: right;\n  background-color: grey;\n}\n\n.upload-icon {\n  opacity: 0.5;\n  width: 40px;\n  height: 40px;\n  margin-bottom: 0.5em;\n}\n\n.valid-file-type {\n  color: green;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}